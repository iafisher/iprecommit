import argparse
import importlib.metadata
import os
import stat
import subprocess
import sys
from pathlib import Path

from . import lib


def main() -> None:
    argparser = argparse.ArgumentParser()
    subparsers = argparser.add_subparsers()

    argparser_init = lib._create_subparser(subparsers, "init")
    argparser_init.add_argument(
        "--force", action="store_true", help="Overwrite existing pre-commit hook."
    )
    argparser_init.add_argument(
        "--path", help="Create precommit.py in a custom location."
    )

    argparser_uninstall = lib._create_subparser(subparsers, "uninstall")
    argparser_uninstall.add_argument(
        "--force", action="store_true", help="Uninstall a non-iprecommit hook."
    )

    argparser_run = lib._create_subparser(subparsers, "run")
    lib._add_run_flags(argparser_run)

    argparser_fix = lib._create_subparser(subparsers, "fix")
    lib._add_fix_flags(argparser_fix)

    args = argparser.parse_args()
    try:
        _main(argparser, args)
    except lib.IPrecommitError as e:
        lib.bail(str(e))


def _main(argparser, args) -> None:
    if args.subcmd == "init":
        main_init(args)
    elif args.subcmd == "run":
        run_precommit_py("run")
    elif args.subcmd == "fix":
        run_precommit_py("fix")
    elif args.subcmd == "uninstall":
        main_uninstall(args)
    else:
        argparser.print_usage()


PRECOMMIT_TEMPLATE = """\
from iprecommit import Pre, checks

pre = Pre()
pre.commit.check(checks.NoDoNotSubmit())
pre.commit.check(checks.NewlineAtEndOfFile())
# run a command:
#   pre.sh("./run_tests", "--verbose")
#   pre.sh("black", "--check", pass_files=True, base_pattern="*.py")
pre.main()
"""


GIT_HOOK_TEMPLATE = """\
#!/bin/sh

# generated by iprecommit, version %(version)s

set -e
%(path_env)s
%(prefix)s/bin/iprecommit run
"""


def main_init(args):
    change_to_git_root()

    # check this early so that we bail before make other changes like creating precommit.py
    hook_path = Path(".git/hooks/pre-commit")
    if hook_path.exists():
        if args.force:
            lib.warn("Overwriting existing pre-commit hook.")
        else:
            lib.bail(
                "pre-commit hook already exists. Re-run with --force to overwrite."
            )

    precommit_path = Path(args.path) if args.path is not None else Path("precommit.py")
    if not precommit_path.exists():
        precommit_path.write_text(PRECOMMIT_TEMPLATE)

    py_prefix = Path(sys.prefix)
    try:
        py_prefix = py_prefix.relative_to(Path(".").absolute())
    except ValueError:
        pass

    if args.path:
        path_env = f"export {lib.ENV_HOOK_PATH}={args.path}"
    else:
        path_env = ""

    hook_path.write_text(
        GIT_HOOK_TEMPLATE
        % dict(prefix=py_prefix, version=get_version(), path_env=path_env)
    )
    perm = hook_path.stat().st_mode
    hook_path.chmod(perm | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)


def main_uninstall(args):
    change_to_git_root()
    p = Path(".git/hooks/pre-commit")
    if not p.exists():
        lib.bail("No pre-commit hook exists.")

    if "generated by iprecommit" not in p.read_text():
        if args.force:
            lib.warn("Uninstalling existing pre-commit hook.")
        else:
            lib.bail(
                "Existing pre-commit hook is not from iprecommit. Re-run with --force to uninstall anyway."
            )

    os.remove(p)


def run_precommit_py(subcmd: str) -> None:
    change_to_git_root()
    # TODO: less hacky way to do this?
    # TODO: what if sys.executable is None?
    path = os.environ.get(lib.ENV_HOOK_PATH, "precommit.py")
    proc = subprocess.run([sys.executable, path, "pre-commit", subcmd] + sys.argv[2:])
    sys.exit(proc.returncode)


def change_to_git_root() -> None:
    d = Path(".").absolute()
    while True:
        if (d / ".git").exists():
            os.chdir(d)
            return

        dn = d.parent
        if d == dn:
            raise lib.IPrecommitError("iprecommit must be run in a Git repository.")
        d = dn


def get_version():
    return importlib.metadata.version("iprecommit")


if __name__ == "__main__":
    main()
